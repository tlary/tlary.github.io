<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Streamlit on Tobias Larysch: Personal Portfolio</title>
    <link>/tags/streamlit/</link>
    <description>Recent content in Streamlit on Tobias Larysch: Personal Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/streamlit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serving ML Models as Microservices with FastAPI, Docker, and Docker-Compose</title>
      <link>/post/fastapi/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/fastapi/</guid>
      <description>In this project I demonstrate how to deploy a ML model as a microservice. The project contains two parts: a simple frontend built with Streamlit and an API built with the FastAPI framework. The frontend is used to acquire information from the user on characteristics that are used as input for the predictive model. The API consists of two endpoints - one for preprocessing the data and one for making predictions. The frontend sends requests to this API and gets the preprocessed data and the predictions as responses. Moreover, I show how to containerize both parts using Docker, and eventually how to deploy them together as a multi-container application with Docker-Compose.</description>
    </item>
    
    <item>
      <title>Streamlit: Deploying ML Models the easy way</title>
      <link>/post/genre_streamlit/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/genre_streamlit/</guid>
      <description>In this blogpost I describe the process of building a good-looking ML App using Streamlit. The app again implements the genre classification model, however the whole process is much easier and faster.</description>
    </item>
    
    <item>
      <title>Titanic: Machine Learning from Disaster - 2021 Update: Streamlit</title>
      <link>/post/titanic/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/titanic/</guid>
      <description>This blogpost contains code for the &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34;&gt;Kaggle Titanic challenge&lt;/a&gt;. It is a well-known beginner challenge and its goal is to build a binary classification model to predict if passengers would have survived the Titanic disaster or not. The focus of this blogpost is on Exploratory Data Analysis and some Feature Engineering. Later on, I built and deployed a small ML app using Streamlit and Streamlit Sharing.</description>
    </item>
    
  </channel>
</rss>